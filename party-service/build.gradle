/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id "org.springframework.boot" version "2.7.18"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    api libs.spring.boot.actuator
    api libs.spring.boot.validation
    api libs.spring.boot.security
    api libs.spring.boot.data
    api libs.spring.boot.web
//    api 'org.springframework.boot:spring-boot-starter-actuator'
//    api 'org.springframework.boot:spring-boot-starter-validation'
//    api 'org.springframework.boot:spring-boot-starter-security'
//    api 'org.springframework.boot:spring-boot-starter-data-jpa'
//    api 'org.springframework.boot:spring-boot-starter-web'

    api libs.spring.cloud.bootstrap
    api libs.spring.cloud.config
    api libs.spring.cloud.feign
    api libs.spring.cloud.eureka
//    api 'org.springframework.cloud:spring-cloud-starter-config'
//    api 'org.springframework.cloud:spring-cloud-starter-bootstrap'
//    api 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//    api 'org.springframework.cloud:spring-cloud-starter-openfeign'


    api libs.postgresql
    api libs.jjwt.api
    api libs.jjwt.impl
    api libs.jjwt.jackson
    api libs.gson

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spring.boot.test
    testImplementation libs.spring.security.test
    testImplementation libs.hamcrest
    testImplementation libs.json.path
    testImplementation libs.testcontainers.jupiter
    testImplementation libs.testcontainers.postgresql
}

group = 'com.alsab.boozycalc'
version = '0.0.1-SNAPSHOT'
description = 'party-service'
java.sourceCompatibility = JavaVersion.VERSION_17


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
