import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id "org.springframework.boot" version "2.7.18"
    id 'jacoco'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    implementation libs.spring.boot.actuator
    implementation libs.spring.boot.validation
    implementation libs.spring.boot.security
    implementation libs.spring.boot.data
    implementation libs.spring.boot.web
    implementation libs.spring.boot.websocket

    implementation libs.spring.cloud.bootstrap
    implementation libs.spring.cloud.config
    implementation libs.spring.cloud.feign
    implementation libs.spring.cloud.eureka

    implementation libs.postgresql
    implementation libs.jjwt.api
    implementation libs.jjwt.impl
    implementation libs.jjwt.jackson
    implementation libs.gson

    implementation libs.webmvc.ui

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spring.boot.test
    testImplementation libs.spring.security.test
    testImplementation libs.hamcrest
    testImplementation libs.json.path
    testImplementation libs.testcontainers.jupiter
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.liquibase
    testImplementation libs.wiremock
}

group = 'com.alsab.boozycalc'
version = '0.0.1-SNAPSHOT'
description = 'party-service'
java.sourceCompatibility = JavaVersion.VERSION_17


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}
