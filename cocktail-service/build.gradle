/*
 * This file was generated by the Gradle 'init' task.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java-library'
    id "org.springframework.boot" version "3.2.0"
    id 'jacoco'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    api libs.spring.boot.actuator
    api libs.spring.boot.validation
    api libs.spring.boot.security
    api libs.spring.boot.data
    api libs.spring.boot.web

    api libs.spring.webflux

    api libs.webmvc.ui

    api libs.spring.cloud.bootstrap
    api libs.spring.cloud.config
    api libs.spring.cloud.eureka

    api libs.postgresql
    api libs.jjwt.api
    api libs.jjwt.impl
    api libs.jjwt.jackson
    api libs.gson

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.spring.boot.test
    testImplementation libs.spring.security.test
    testImplementation libs.hamcrest
    testImplementation libs.json.path
    testImplementation libs.testcontainers.jupiter
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.liquibase
}

group = 'com.alsab.boozycalc'
version = '0.0.1-SNAPSHOT'
description = 'cocktail-service'
java.sourceCompatibility = JavaVersion.VERSION_17


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}