services:
  prod_db:
    image: postgres:latest
    hostname: postgres
    command: postgres -c 'max_connections=200'
    environment:
      POSTGRES_USER: ${DOCKER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DOCKER_POSTGRES_DB}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DOCKER_POSTGRES_USER} -d ${DOCKER_POSTGRES_DB}'" ]
      interval: 3s
      timeout: 3s
      retries: 3

  liquibase:
    depends_on:
      prod_db:
        condition: service_healthy
    image: liquibase/liquibase:latest
    container_name: liquibase_container
    volumes:
      - ./src/main/resources/db/changelog:/liquibase/changelog/
    command:
      update --changelog-file=db.changelog-master.yaml --url=jdbc:postgresql://prod_db:5432/${DOCKER_POSTGRES_DB} --username=${DOCKER_POSTGRES_USER} --password=${DOCKER_POSTGRES_PASSWORD}

  eureka:
    image: booze-eureka:latest
    container_name: eureka
    environment:
      - 'PAGINATION_MAX_SIZE=50'
      - 'JWT_SECRET=itmo'
      - 'JWT_EXPIRED=15'
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - 8761:8761
    depends_on:
      prod_db:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 15s
      retries: 5
      timeout: 10s

  config:
    image: booze-config:latest
    container_name: config
    environment:
      - 'PAGINATION_MAX_SIZE=50'
      - 'JWT_SECRET=itmo'
      - 'JWT_EXPIRED=15'
      - 'JWT_EXPIRATION=1800000'
    build:
      context: ./config
      dockerfile: Dockerfile
    ports:
      - 8888:8888
    depends_on:
      eureka:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent config:8888/actuator/health | grep UP || exit 1"
      interval: 15s
      retries: 5
      timeout: 10s


  gateway:
    image: booze-gateway:latest
    container_name: gateway
    environment:
      - 'PAGINATION_MAX_SIZE=50'
      - 'JWT_SECRET=itmo'
      - 'JWT_EXPIRED=15'
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    depends_on:
      config:
        condition: service_healthy


  cocktailsapp:
    depends_on:
      - gateway
    image: booze-cocktail:latest
    container_name: cocktail-service
    build:
      context: ./cocktail-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - PAGINATION_MAX_SIZE=50
      - POSTGRES_USER=${DOCKER_POSTGRES_USER}
      - POSTGRES_PASS=${DOCKER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DOCKER_POSTGRES_DB}
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  authapp:
    depends_on:
      - gateway
    image: booze-auth:latest
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - PAGINATION_MAX_SIZE=50
      - POSTGRES_USER=${DOCKER_POSTGRES_USER}
      - POSTGRES_PASS=${DOCKER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DOCKER_POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRED=1800000
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  partyapp:
    depends_on:
      - gateway
    image: booze-party:latest
    container_name: party-service
    build:
      context: ./party-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - PAGINATION_MAX_SIZE=50
      - POSTGRES_USER=${DOCKER_POSTGRES_USER}
      - POSTGRES_PASS=${DOCKER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DOCKER_POSTGRES_DB}
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8183:8183

  notificationapp:
    depends_on:
      - gateway
    image: booze-notification:latest
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 7777:7777

volumes:
  db-data:
